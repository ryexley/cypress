// ************************************************************************* */
// https://github.com/Compass/compass/blob/stable/core/stylesheets/compass/typography/_units.scss
// ************************************************************************* */

// @private Default font-size for all browsers
$browser-default-font-size: 16px;

// Base font size in pixels, if not already defined.
// Should be the same as the font-size of the html element.
$base-font-size: 16px !default;

// Whether to output fallback values in px when outputting rems.
$rem-with-px-fallback: true !default;


// Convert any CSS <length> or <percentage> value to any another.
//
// @param $length
//   A css <length> or <percentage> value
//
// @param $to-unit
//   String matching a css unit keyword, e.g. 'em', '%', etc.
//
// @param $from-context
//   When converting from relative units, the absolute length (in px) to
//   which $length refers (e.g. for $lengths in em units, would normally be the
//   font-size of the current element).
//
// @param $to-context
//   For converting to relative units, the absolute length in px to which the
//   output value will refer. Defaults to the same as $from-context, since it is
//   rarely needed.
@function convert-length(
    $length,
    $to-unit,
    $from-context: $base-font-size,
    $to-context: $from-context
) {

    $from-unit: unit($length);

    // Optimize for cases where `from` and `to` units are accidentally the same.
    @if $from-unit == $to-unit { @return $length; }

    // Context values must be in px so we can determine a conversion ratio for
    // relative units.
    @if unit($from-context) != 'px' { @warn "Paremeter $from-context must resolve to a value in pixel units."; }
    @if unit($to-context) != 'px' { @warn "Parameter $to-context must resolve to a value in pixel units."; }

    // Convert input length to pixels
    $px-length: $length;

    @if $from-unit != 'px' {
        // Convert relative units using the from-context parameter.
        @if      $from-unit == 'em'  { $px-length: $length * $from-context / 1em }
        @else if $from-unit == 'rem' { $px-length: $length * $base-font-size / 1rem }
        @else if $from-unit == '%'   { $px-length: $length * $from-context / 100% }
        @else if $from-unit == 'ex'  { $px-length: $length * $from-context / 2ex }
        // Convert absolute units using Sass' conversion table.
        @else if $from-unit == 'in'  or
                         $from-unit == 'mm'  or
                         $from-unit == 'cm'  or
                         $from-unit == 'pt'  or
                         $from-unit == 'pc'  { $px-length: 0px + $length }
        // Certain units can't be converted.
        @else if $from-unit == 'ch'  or
                         $from-unit == 'vw'  or
                         $from-unit == 'vh'  or
                         $from-unit == 'vmin' {
            @warn "#{$from-unit} units can't be reliably converted; Returning original value.";
            @return $length;
        }
        @else {
            @warn "#{$from-unit} is an unknown length unit. Returning original value.";
            @return $length;
        }
    }

    // Convert length in pixels to the output unit
    $output-length: $px-length;
    @if $to-unit != 'px' {
        // Relative units
        @if      $to-unit == 'em'  { $output-length: $px-length * 1em / $to-context }
        @else if $to-unit == 'rem' { $output-length: $px-length * 1rem / $base-font-size }
        @else if $to-unit == '%'   { $output-length: $px-length * 100% / $to-context }
        @else if $to-unit == 'ex'  { $output-length: $px-length * 2ex / $to-context }
        // Absolute units
        @else if $to-unit == 'in'  { $output-length: 0in + $px-length }
        @else if $to-unit == 'mm'  { $output-length: 0mm + $px-length }
        @else if $to-unit == 'cm'  { $output-length: 0cm + $px-length }
        @else if $to-unit == 'pt'  { $output-length: 0pt + $px-length }
        @else if $to-unit == 'pc'  { $output-length: 0pc + $px-length }
        // Non-convertible units
        @else if $to-unit == 'ch'  or
                         $to-unit == 'vw'  or
                         $to-unit == 'vh'  or
                         $to-unit == 'vmin' {
            @warn "#{$to-unit} units can't be reliably converted; Returning original value.";
            @return $length;
        }
        @else {
            @warn "#{$to-unit} is an unknown length unit. Returning original value.";
            @return $length;
        }
    }

    @return $output-length;
}


// @private Get the px/rem versions of a value.
@function rem-fallback-values($value) {
  $_return: (
    px: $value,
    rem: $value,
  );

  @if type-of($value) == number and not unitless($value) {
    @if unit($value) == rem {
      $_return: map-merge($_return, (
        px: round(convert-length($value, px)),
      ));
    } @else if unit($value) == px {
      $_return: map-merge($_return, (
        px: round($value),
        rem: convert-length($value, rem),
      ));
    }
  }

  @return $_return;
}

// @private Get the px/rem versions of a list (or nested lists).
@function list-convert-rems($value) {
  $_empty: (
    px: (),
    rem: (),
  );
  $_return: $_empty;
  $_sep: null;

  @if type-of($value) == list {
    $_sep: list-separator($value);
    @each $sub in $value {
      $_this: list-convert-rems($sub);
      $_return: (
        px: append(map-get($_return, px), map-get($_this, px), $_sep),
        rem: append(map-get($_return, rem), map-get($_this, rem), $_sep),
      );
    }
  } @else {
    $_this: rem-fallback-values($value);
    $_return: map-merge($_return, $_this);
  }

  @return $_return;
}


// Output a given style rule containing rem values along with an (optional)
// fallback rule for older browsers (with rem values converted to px).
//
// @param $property
//   The css property name.
//
// @param $values
//   The value or list of values for the property.
//
// @param $use-px-fallback
//   [ true | false ]
//
@mixin rem($property, $values, $use-px-fallback: $rem-with-px-fallback) {

  // get converted values.
  $values: list-convert-rems($values);
  $px-values: map-get($values, px);
  $values: map-get($values, rem);

  // Use pixel fallback for browsers that don't understand rem units.
  @if $use-px-fallback and $px-values != $values {
    #{$property}: $px-values;
  }

  // Use rem values for everyone else (overrides pixel values).
  #{$property}: $values;
}

// ************************************************************************* */
// https://github.com/Compass/compass/blob/stable/core/stylesheets/compass/typography/_vertical_rhythm.scss
// ************************************************************************* */

// The default font size for all text in pixels
$base-font-size: 16px !default;

// The distance between text baselines (vertical rhythm) in pixels.
$base-line-height: 24px !default;

// The length unit in which to output rhythm values.
// Supported values: px, em, rem. Percent units can't be used since they
// make calculating padding and margins impractical, and percentage borders are
// not valid or supported in css.
$rhythm-unit: 'em' !default;

// Whether to output fallback values in px when using rem as the rhythm-unit.
$rem-with-px-fallback: true !default;

// Default values for rhythm borders properties.
// Supports style alone eg. `solid` or list of style and color eg. `solid #aaa`;
$default-rhythm-border-width: 1px !default;
$default-rhythm-border-style: solid !default;

// Allows the `adjust-font-size-to` mixin and the `lines-for-font-size` function
// to round the line height to the nearest half line height instead of the
// nearest integral line height to avoid large spacing between lines.
$round-to-nearest-half-line: false !default;

// Ensure there is at least this many pixels
// of vertical padding above and below the text.
$min-line-padding: 2px !default;

// The leader is the amount of whitespace in a line.
// It might be useful in your calculations.
$base-leader: convert-length($base-line-height - $base-font-size, $rhythm-unit, $base-font-size);

// The half-leader is the amount of whitespace above and below a line.
// It might be useful in your calculations.
$base-half-leader: $base-leader / 2;

// @private Whether the rhythm output is in absolute units (px) or not (em, rem)
$relative-font-sizing: if($rhythm-unit == px, false, true);

// Validate units
@if unit($base-font-size)   != 'px' { @warn "$base-font-size must resolve to a pixel unit."; }
@if unit($base-line-height) != 'px' { @warn "$base-line-height must resolve to a pixel unit."; }
@if $rhythm-unit != 'px' and $rhythm-unit != 'em' and $rhythm-unit != 'rem' {
  @warn "$rhythm-unit must be `px`, `em` or `rem`.";
}


// Calculate rhythm units.
@function rhythm($lines: 1, $font-size: $base-font-size, $offset: 0) {
  $rhythm: convert-length($lines * $base-line-height - $offset, $rhythm-unit, $font-size);
  @if unit($rhythm) == px {
    $rhythm: floor($rhythm);
  }
  @return $rhythm;
}

// Calculate the minimum multiple of rhythm units needed to contain the font-size.
@function lines-for-font-size($font-size) {
  $lines: if($round-to-nearest-half-line,
             ceil(2 * $font-size / $base-line-height) / 2,
             ceil($font-size / $base-line-height));
  // If lines are cramped include some extra lead.
  @if ($lines * $base-line-height - $font-size) < ($min-line-padding * 2) {
    $lines: $lines + if($round-to-nearest-half-line, 0.5, 1);
  }
  @return $lines;
}


// @private Outputs rhythm values. For rem units, outputs pixel fallbacks
// by default.
@mixin output-rhythm($property, $values) {
  @if $rhythm-unit == rem and $rem-with-px-fallback {
    @include rem($property, $values);
  }
  @else {
    $output: ();
    @each $value in $values {
      @if unit($value) == px {
        // Ensure all pixel values are rounded to the nearest pixel.
        $output: join($output, round($value));
      }
      @else {
        $output: join($output, $value);
      }
    }
    #{$property}: $output;
  }
}

// Establishes a font baseline for the given font-size.
@mixin establish-baseline($font-size: $base-font-size) {
  $relative-size: 100% * ($font-size / $browser-default-font-size);

  @if support-legacy-browser(ie, "6") and (not $relative-font-sizing) {
    // IE 6 refuses to resize fonts set in pixels and it weirdly resizes fonts
    // whose root is set in ems. So we set the root font size in percentages of
    // the default font size, even if we are using absolute sizes elsewhere.
    * html { font-size: $relative-size; }
  }
  html {
    font-size: if($relative-font-sizing, $relative-size, $font-size);

    // Webkit has a bug that prevents line-height being set in rem on <html>;
    // To work around this and simplify output, we can set initial line-height
    // in ems for all relative rhythm units, even when $rhythm-unit is `rem`.
    @if $relative-font-sizing {
      line-height: convert-length($base-line-height, em);
    }
    @else {
      line-height: round($base-line-height);
    }
  }
}

// Resets the baseline to 1 rhythm unit
// Does not work on elements whose font-size is different from $base-font-size.
//
// @deprecated This mixin will be removed in the next release.
// Please use `adjust-leading-to(1)` instead.
@mixin reset-baseline($font-size: $base-font-size) {
  @include adjust-leading-to(1, $font-size);
}

// Show a background image that can be used to debug your alignments.
// As this is a development feature, this mixin never outputs pixel fallbacks
// for rem output.
// Include the $img argument if you would rather use your own image than the
// Compass default gradient image.
@mixin debug-vertical-alignment($img: false) {
  @if $img {
    background: image-url($img);
  }
  @else {
    @include baseline-grid-background(if($round-to-nearest-half-line, rhythm(1/2), rhythm(1)));
  }
}

// Adjust a block to have a different font size and line height to maintain the
// rhythm. $lines specifies how many multiples of the baseline rhythm each line
// of this font should use up. It does not have to be an integer, but it
// defaults to the smallest integer that is large enough to fit the font.
// Use $from-size to adjust from a font-size other than the base font-size.
@mixin adjust-font-size-to($to-size, $lines: auto, $from-size: $base-font-size) {
  $to-size: convert-length($to-size, px, $from-size);
  @if $lines == auto {
    $lines: lines-for-font-size($to-size);
  }
  @include output-rhythm(font-size, convert-length($to-size, $rhythm-unit, $from-size));
  @include adjust-leading-to($lines, $to-size);
}

// Adjust a block to have different line height to maintain the rhythm.
// $lines specifies how many multiples of the baseline rhythm each line of this
// font should use up. It does not have to be an integer, but it defaults to the
// smallest integer that is large enough to fit the font.
@mixin adjust-leading-to($lines, $font-size: $base-font-size) {
  @include output-rhythm(line-height, rhythm($lines, $font-size));
}

// Apply leading whitespace. The $property can be margin or padding.
@mixin leader($lines: 1, $font-size: $base-font-size, $property: margin) {
  @include output-rhythm(#{$property}-top, rhythm($lines, $font-size));
}

// Apply leading whitespace as padding.
@mixin padding-leader($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(padding-top, rhythm($lines, $font-size));
}

// Apply leading whitespace as margin.
@mixin margin-leader($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(margin-top, rhythm($lines, $font-size));
}

// Apply trailing whitespace. The $property can be margin or padding.
@mixin trailer($lines: 1, $font-size: $base-font-size, $property: margin) {
  @include output-rhythm(#{$property}-bottom, rhythm($lines, $font-size));
}

// Apply trailing whitespace as padding.
@mixin padding-trailer($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(padding-bottom, rhythm($lines, $font-size));
}

// Apply trailing whitespace as margin.
@mixin margin-trailer($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(margin-bottom, rhythm($lines, $font-size));
}

// Shorthand mixin to apply whitespace for top and bottom margins and padding.
@mixin rhythm(
  $leader: 1,
  $padding-leader: 0,
  $padding-trailer: $padding-leader,
  $trailer: $leader,
  $font-size: $base-font-size
) {
  @include leader($leader, $font-size);
  @include padding-leader($padding-leader, $font-size);
  @include padding-trailer($padding-trailer, $font-size);
  @include trailer($trailer, $font-size);
}

// Shorthand mixin to apply whitespace for top and bottom margins.
@mixin rhythm-margins(
  $leader: 1,
  $trailer: $leader,
  $font-size: $base-font-size
) {
  @include leader($leader, $font-size);
  @include trailer($trailer, $font-size);
}

// Shorthand mixin to apply whitespace for top and bottom padding.
@mixin rhythm-padding(
  $padding-leader: 1,
  $padding-trailer: $padding-leader,
  $font-size: $base-font-size
) {
  @include padding-leader($padding-leader, $font-size);
  @include padding-trailer($padding-trailer, $font-size);
}

// Apply a border and whitespace to any side without destroying the vertical
// rhythm. The whitespace must be greater than the width of the border.
@mixin apply-side-rhythm-border(
  $side,
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  // If applying borders to all sides, use shorthand properties
  $border-prop: if($side == all, border, border-#{$side});
  @include output-rhythm(#{$border-prop}-width, convert-length($width, $rhythm-unit, $font-size));
  #{$border-prop}-style: nth($border-style, 1);
  @if type-of($border-style) == list and length($border-style) > 1 {
    #{$border-prop}-color: nth($border-style, 2);
  }
  $padding-prop: if($side == all, padding, padding-#{$side});
  @include output-rhythm(#{$padding-prop}, rhythm($lines, $font-size, $offset: $width));
}

// Apply a leading border.
// $border-style and $width are deprecated and will be removed in a future version of Compass.
@mixin leading-border(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include apply-side-rhythm-border(top, $width, $lines, $font-size, $border-style);
}

// Apply a trailing border.
@mixin trailing-border(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include apply-side-rhythm-border(bottom, $width, $lines, $font-size, $border-style);
}

// Apply both leading and trailing borders.
@mixin horizontal-borders(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include leading-border($width, $lines, $font-size, $border-style);
  @include trailing-border($width, $lines, $font-size, $border-style);
}

// Alias for `horizontal-borders` mixin.
@mixin h-borders(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include horizontal-borders($width, $lines, $font-size, $border-style);
}

// Apply borders and whitespace equally to all sides.
@mixin rhythm-borders(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include apply-side-rhythm-border(all, $width, $lines, $font-size, $border-style);
}
