@mixin cf {
  *zoom: 1;

  &:before, &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

%cf {
  @include cf;
}

@function strip-unit ($num) {
  @return $num / ($num * 0 + 1);
}

// adapted from https://github.com/davidtheclark/scut/blob/master/src/functions/_em.scss
$em-base: 16 !default;

@function em ($pixels, $base: $em-base) {
  // $base could be in em or px (no unit = px).
  // Adjust accordingly to create a $divisor that
  // serves as context for $pixels.
  $multiplier: if(unit($base) == em, 16, 1);
  $divisor: strip-unit($base) * $multiplier;

  $em-vals: ();
  @each $val in $pixels {
    $val-in-ems: (strip-unit($val) / $divisor) * 1em;
    $em-vals: append($em-vals, $val-in-ems);
  }

  @if length($em-vals) == 1 {
    // return a single value instead of a list,
    // so it can be used in calculations
    @return nth($em-vals, 1);
  }
  @else {
    @return $em-vals;
  }
}

// adapted from https://github.com/davidtheclark/scut/blob/master/src/functions/_rem.scss
$rem-base: 16 !default;

@function rem ($pixels) {
  $rem-vals: ();
  @each $val in $pixels {
    $val-in-rems: strip-unit($val) / $rem-base * 1rem;
    $rem-vals: append($rem-vals, $val-in-rems);
  }

  @if length($rem-vals) == 1 {
    // return a single value instead of a list,
    // so it can be used in calculations
    @return nth($rem-vals, 1);
  }
  @else {
    @return $rem-vals;
  }
}

// adapted from https://github.com/davidtheclark/scut/blob/master/src/layout/_list-unstyled.scss
@mixin list-unstyled($no-margin: true) {
  list-style-type: none;
  padding-left: 0;

  @if $no-margin {
    margin-top: 0;
    margin-bottom: 0;
  }
}

%list-unstyled {
  @include list-unstyled();
}

// adapted from https://github.com/davidtheclark/scut/blob/master/src/layout/_list-floated.scss
@mixin list-floated ($space: false, $dir: left, $no-margin: true) {
  @include list-unstyled($no-margin);
  @include cf;

  & > li {
    float: $dir;
  }

  @if $space {
    & > li + li {
      margin-#{$dir}: $space;
    }
  }
}

%list-floated {
  @include list-floated;
}

// adapted from https://github.com/davidtheclark/scut/blob/master/src/layout/_positioning-coords.scss
@function autoOrValue ($val) {
  @if $val == a or $val == auto {
    @return auto;
  } @else {
    @return $val;
  }
}

@mixin coords ($coordinates: n n n n) {
  $top: nth($coordinates, 1);
  $right: nth($coordinates, 2);
  $bottom: nth($coordinates, 3);
  $left: nth($coordinates, 4);

  @if $top != n {
    top: autoOrValue($top);
  }

  @if $right != n {
    right: autoOrValue($right);
  }

  @if $bottom != n {
    bottom: autoOrValue($bottom);
  }

  @if $left != n {
    left: autoOrValue($left);
  }
}

// adapted from https://github.com/davidtheclark/scut/blob/master/src/layout/_positioning-fixed.scss
@mixin fixed ($coordinates: 0 n n 0) {
  position: fixed;
  @include coords($coordinates);
}

%fixed {
  @include fixed;
}

// adapted from https://github.com/davidtheclark/scut/blob/master/src/layout/_positioning-absolute.scss
@mixin absolute ($coordinates: 0 n n 0) {
  position: absolute;
  @include coords($coordinates);
}

%absolute {
  @include absolute;
}
